refaire la fusion de blocs ? (pas dingue si on veut pouvoir se faire souligner simultanément les mots parallèles)
ajouter fonctionnalités de comparaison supplémentaires ?
ajouter affichage du nombre de modifications ?
implémenter barre de chargement
vérifier comment "externaliser" le calcul
implémenter affichages selon type de modification (réflechir à comment bien afficher)
ajouter fonctionnalités de téléchargement de l'outil et d'import/export de résultats
ajouter version en Anglais (britannique de préférence)

pour l'instant : pas de POS-tagging, "des" est considéré à la fois comme le pluriel de "un" et de "de"
si du POS-tagging est fait à l'avenir : respecter le format du DELAF et mettre à jour le script créateur de .json

complexités pour l'instant (n la taille du texte 1 et m la taille du texte 2 en mots):
    - score :                   beaucoup de tests et d'appels au DELA, quelques boucles quadratiques dans des tableaux (le plus souvent de taille 1 à 3 donc rapide)
    - create_dict :             n * créer la cellule de min_max + appel des 2 fonctions suivantes (en gros n * m * une constante)
    - make_dict_boundaries :    (n/min_block_size)*(m/min_block_size) * complexité de MinHash sur 2 sets de taille min_block_size + propagation
                                pathmaking basique dans une matrice (n/min_block_size)*(m/min_block_size)
                                boucle dans le parcours et création de 2 arrays pour les min & max
    - calculate_and_propagate : n * m * le temps nécessaire pour faire le score d'une case + choper les trois autres cases et faire la comparaison
    - make_out_path :           au pire des cas (n + m) * beaucoup de tests et d'accès au dict 
                                dans le meilleur des cas max(n,m) * beaucoup de tests et d'accès au dict 
    - alt_bring_text_back :     (n + m) * une petite constante
    - make_spans :              pareil

possibilités d'optimisation : le multi-scale (qui est déjà bcp mieux)